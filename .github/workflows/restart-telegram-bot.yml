name: Restart Telegram Bot

on:
  workflow_dispatch:
  
  # Optionally, you can schedule periodic restarts
  # schedule:
  #   - cron: '0 3 * * *'  # Daily at 3 AM UTC

jobs:
  restart-telegram-bot:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass
      
      - name: Check Required Environment Variables
        run: |
          echo "üîç Checking required environment variables..."
          MISSING_VARS=""
          
          # List of required variables
          REQUIRED_VARS=(
            "TELEGRAM_BOT_SERVER_USER"
            "TELEGRAM_BOT_SERVER_PASSWORD"
            "TELEGRAM_BOT_SERVER_HOST"
            "TELEGRAM_BOT_SERVER_PORT"
            "TELEGRAM_BOT_SERVER_ROOT_PATH"
            "TELEGRAM_BOT_SERVER_DOCKER_COMPOSE_PATH"
          )
          
          for var in "${REQUIRED_VARS[@]}"; do
            if [ -z "${!var}" ]; then
              MISSING_VARS="$MISSING_VARS $var"
              echo "‚ùå Missing: $var"
            else
              echo "‚úÖ Found: $var"
            fi
          done
          
          if [ ! -z "$MISSING_VARS" ]; then
            echo ""
            echo "‚ùå Missing required environment variables:$MISSING_VARS"
            echo "Please configure these secrets in your GitHub repository settings."
            echo "Run: node scripts/configure-github-secrets.mjs"
            exit 1
          fi
          
          echo "‚úÖ All required environment variables are configured"
        env:
          TELEGRAM_BOT_SERVER_USER: ${{ secrets.TELEGRAM_BOT_SERVER_USER }}
          TELEGRAM_BOT_SERVER_PASSWORD: ${{ secrets.TELEGRAM_BOT_SERVER_PASSWORD }}
          TELEGRAM_BOT_SERVER_HOST: ${{ secrets.TELEGRAM_BOT_SERVER_HOST }}
          TELEGRAM_BOT_SERVER_PORT: ${{ secrets.TELEGRAM_BOT_SERVER_PORT }}
          TELEGRAM_BOT_SERVER_ROOT_PATH: ${{ secrets.TELEGRAM_BOT_SERVER_ROOT_PATH }}
          TELEGRAM_BOT_SERVER_DOCKER_COMPOSE_PATH: ${{ secrets.TELEGRAM_BOT_SERVER_DOCKER_COMPOSE_PATH }}
      
      - name: Restart Telegram Bot with Log Backup
        env:
          SSHPASS: ${{ secrets.TELEGRAM_BOT_SERVER_PASSWORD }}
        run: |
          echo "Restarting Telegram Bot on ${{ secrets.TELEGRAM_BOT_SERVER_HOST }}..."
          
          # Create a formatted script and execute it via SSH  
          SCRIPT="
            clear 2>/dev/null || true
            
            # Create timestamp for unique file names (using only dashes)
            TIMESTAMP=\$(date +\"%Y-%m-%d-%H-%M-%S\")
            LOGS_FILENAME=\"telegram-bot-logs-\${TIMESTAMP}.tar.gz\"
            
            echo \"üì∏ 1. Creating log snapshot before restart...\"
            # Navigate to the project directory first to get correct container name
            cd ${{ secrets.TELEGRAM_BOT_SERVER_ROOT_PATH }}
            
            # Debug: Show all containers first
            echo \"üîç DEBUG: Current containers:\"
            docker-compose -f ${{ secrets.TELEGRAM_BOT_SERVER_DOCKER_COMPOSE_PATH }} ps
            
            # Get the container name from docker-compose ps output (look for running containers)
            CONTAINER_NAME=\$(docker-compose -f ${{ secrets.TELEGRAM_BOT_SERVER_DOCKER_COMPOSE_PATH }} ps -q --filter \"status=running\" | head -1)
            
            echo \"üîç DEBUG: Found container ID: '\$CONTAINER_NAME'\"
            
            if [ ! -z \"\$CONTAINER_NAME\" ]; then
              # Backup logs from the running container
              docker logs \$CONTAINER_NAME --timestamps > ~/telegram-bot-logs-\${TIMESTAMP}.txt 2>&1
              
              # Archive the logs
              tar -czvf ~/\${LOGS_FILENAME} -C ~ telegram-bot-logs-\${TIMESTAMP}.txt
              
              # Remove temporary log file
              rm ~/telegram-bot-logs-\${TIMESTAMP}.txt
              
              echo \"üíæ Log snapshot saved as: ~/\${LOGS_FILENAME}\"
              LOG_BACKUP_CREATED=\"true\"
            else
              echo \"‚ÑπÔ∏è  No running container found, skipping log backup\"
              LOG_BACKUP_CREATED=\"false\"
            fi
            
            echo \"‚èπÔ∏è  2. Stopping existing containers...\"
            docker-compose -f ${{ secrets.TELEGRAM_BOT_SERVER_DOCKER_COMPOSE_PATH }} down
            
            echo \"üöÄ 3. Starting containers with rebuild...\"
            docker-compose -f ${{ secrets.TELEGRAM_BOT_SERVER_DOCKER_COMPOSE_PATH }} up -d --build
            
            # Wait for services to start
            echo \"‚è≥ 4. Waiting for services to start...\"
            sleep 10
            
            # Check if containers are running
            echo \"üîç 5. Checking container status...\"
            docker-compose -f ${{ secrets.TELEGRAM_BOT_SERVER_DOCKER_COMPOSE_PATH }} ps
            
            # Fix domain name resolution issue (GitHub issue #2)
            echo \"üåê 6. Fixing domain name resolution...\"
            RUNNING_CONTAINER=\$(docker-compose -f ${{ secrets.TELEGRAM_BOT_SERVER_DOCKER_COMPOSE_PATH }} ps -q --filter \"status=running\" | head -1)
            if [ ! -z \"\$RUNNING_CONTAINER\" ]; then
              docker exec \$RUNNING_CONTAINER /bin/bash -c \"echo '173.212.230.201 api.deep.assistant.run.place' >> /etc/hosts\"
              echo \"‚úÖ Domain resolution fix applied to container \$RUNNING_CONTAINER\"
            else
              echo \"‚ö†Ô∏è  No running container found to apply domain resolution fix\"
            fi
            
            if [ \"\$LOG_BACKUP_CREATED\" = \"true\" ]; then
              echo \"‚úÖ Restart complete. Log backup available at: ~/\${LOGS_FILENAME}\"
            else
              echo \"‚úÖ Restart complete. No log backup created (no previous container was running).\"
            fi
          "
          
          # SSH into the server and execute the script
          sshpass -e ssh -o StrictHostKeyChecking=no -o LogLevel=QUIET -o ConnectTimeout=30 -T -p ${{ secrets.TELEGRAM_BOT_SERVER_PORT }} ${{ secrets.TELEGRAM_BOT_SERVER_USER }}@${{ secrets.TELEGRAM_BOT_SERVER_HOST }} "$SCRIPT"
      
      - name: Notify completion
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Telegram Bot restarted successfully"
          else
            echo "‚ùå Failed to restart Telegram Bot"
          fi