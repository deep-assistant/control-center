name: Download API Gateway Logs

on:
  workflow_dispatch:
    inputs:
      log_pattern:
        description: 'Log file pattern (e.g., api-gateway-logs-*.tar.gz)'
        required: false
        default: 'api-gateway-logs-*.tar.gz'
  
  # Optionally, you can schedule periodic log downloads
  # schedule:
  #   - cron: '0 4 * * *'  # Daily at 4 AM UTC

jobs:
  download-api-gateway-logs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          node --version
          npm --version
      
      - name: Check Required Environment Variables
        run: |
          echo "üîç Checking required environment variables..."
          MISSING_VARS=""
          
          # List of required variables
          REQUIRED_VARS=(
            "SYSTEM_TELEGRAM_BOT_TOKEN"
            "DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_CHAT_ID"
            "DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_LOGS_TOPIC_ID"
            "API_GATEWAY_SERVER_USER"
            "API_GATEWAY_SERVER_PASSWORD"
            "API_GATEWAY_SERVER_HOST"
            "API_GATEWAY_SERVER_PORT"
            "API_GATEWAY_SERVER_ROOT_PATH"
          )
          
          for var in "${REQUIRED_VARS[@]}"; do
            if [ -z "${!var}" ]; then
              MISSING_VARS="$MISSING_VARS $var"
              echo "‚ùå Missing: $var"
            else
              echo "‚úÖ Found: $var"
            fi
          done
          
          if [ ! -z "$MISSING_VARS" ]; then
            echo ""
            echo "‚ùå Missing required environment variables:$MISSING_VARS"
            echo "Please configure these secrets in your GitHub repository settings."
            echo "Run: node scripts/configure-github-secrets.mjs"
            exit 1
          fi
          
          echo "‚úÖ All required environment variables are configured"
        env:
          SYSTEM_TELEGRAM_BOT_TOKEN: ${{ secrets.SYSTEM_TELEGRAM_BOT_TOKEN }}
          DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_CHAT_ID: ${{ secrets.DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_CHAT_ID }}
          DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_LOGS_TOPIC_ID: ${{ secrets.DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_LOGS_TOPIC_ID }}
          API_GATEWAY_SERVER_USER: ${{ secrets.API_GATEWAY_SERVER_USER }}
          API_GATEWAY_SERVER_PASSWORD: ${{ secrets.API_GATEWAY_SERVER_PASSWORD }}
          API_GATEWAY_SERVER_HOST: ${{ secrets.API_GATEWAY_SERVER_HOST }}
          API_GATEWAY_SERVER_PORT: ${{ secrets.API_GATEWAY_SERVER_PORT }}
          API_GATEWAY_SERVER_ROOT_PATH: ${{ secrets.API_GATEWAY_SERVER_ROOT_PATH }}

      - name: Download and Upload API Gateway Logs to Telegram
        env:
          SSHPASS: ${{ secrets.API_GATEWAY_SERVER_PASSWORD }}
          SYSTEM_TELEGRAM_BOT_TOKEN: ${{ secrets.SYSTEM_TELEGRAM_BOT_TOKEN }}
          DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_CHAT_ID: ${{ secrets.DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_CHAT_ID }}
          DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_LOGS_TOPIC_ID: ${{ secrets.DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_LOGS_TOPIC_ID }}
          LOGS_SERVICE_NAME: 'api-gateway'
          API_GATEWAY_SERVER_USER: ${{ secrets.API_GATEWAY_SERVER_USER }}
          API_GATEWAY_SERVER_PASSWORD: ${{ secrets.API_GATEWAY_SERVER_PASSWORD }}
          API_GATEWAY_SERVER_HOST: ${{ secrets.API_GATEWAY_SERVER_HOST }}
          API_GATEWAY_SERVER_PORT: ${{ secrets.API_GATEWAY_SERVER_PORT }}
          API_GATEWAY_SERVER_ROOT_PATH: ${{ secrets.API_GATEWAY_SERVER_ROOT_PATH }}
        run: |
          echo "üìã Downloading API Gateway logs from ${{ secrets.API_GATEWAY_SERVER_HOST }}..."
          
          # SSH into the server and find all matching log files
          echo "üîç Searching for log files matching pattern: ${{ github.event.inputs.log_pattern || 'api-gateway-logs-*.tar.gz' }}"
          
          LOG_FILES=$(sshpass -e ssh -o StrictHostKeyChecking=no -o LogLevel=QUIET -T -p ${{ secrets.API_GATEWAY_SERVER_PORT }} ${{ secrets.API_GATEWAY_SERVER_USER }}@${{ secrets.API_GATEWAY_SERVER_HOST }} << 'EOF'
            # Clear any banner output first
            clear 2>/dev/null || true
            # Find all log files matching the pattern, sorted by modification time (newest first)
            PATTERN="${{ github.event.inputs.log_pattern || 'api-gateway-logs-*.tar.gz' }}"
            find ~ -name "$PATTERN" -type f -printf '%T@ %p\n' 2>/dev/null | sort -nr | cut -d' ' -f2-
          EOF
          )
          
          # Filter out any non-path lines (in case banner still appears)
          LOG_FILES=$(echo "$LOG_FILES" | grep '^/' || true)
          
          if [ -z "$LOG_FILES" ]; then
            echo "‚ÑπÔ∏è  No log files found on server matching pattern: ${{ github.event.inputs.log_pattern || 'api-gateway-logs-*.tar.gz' }}"
            echo ""
            echo "üí° Possible solutions:"
            echo "1. Run 'Restart API Gateway' workflow first to generate logs"
            echo "2. Check if log files exist with different naming pattern"
            echo "3. Verify the server has been running and generating logs"
            echo ""
            echo "üîç Available log files on server:"
            sshpass -e ssh -o StrictHostKeyChecking=no -o LogLevel=QUIET -T -p ${{ secrets.API_GATEWAY_SERVER_PORT }} ${{ secrets.API_GATEWAY_SERVER_USER }}@${{ secrets.API_GATEWAY_SERVER_HOST }} "clear 2>/dev/null || true; find ~ -name '*log*' -type f | grep -E '(api|gateway)' | head -10 || echo 'No api/gateway related log files found'"
            echo ""
            echo "‚úÖ No files to upload - workflow completed successfully"
            exit 0
          fi
          
          # Count the number of log files found
          LOG_COUNT=$(echo "$LOG_FILES" | wc -l)
          echo "üì¶ Found $LOG_COUNT log file(s):"
          echo "$LOG_FILES"
          
          # Process each log file
          PROCESSED_COUNT=0
          echo "$LOG_FILES" | while IFS= read -r LOG_FILE_PATH; do
            if [ -n "$LOG_FILE_PATH" ]; then
              echo ""
              echo "üöÄ Processing log file: $LOG_FILE_PATH"
              
              # Set the log file path for the telegram uploader
              export LOGS_FILE_PATH="$LOG_FILE_PATH"
              
              # Run the telegram uploader script for this file
              node scripts/telegram-logs-uploader.mjs
              
              echo "‚úÖ Completed processing: $LOG_FILE_PATH"
              PROCESSED_COUNT=$((PROCESSED_COUNT + 1))
            fi
          done
          
          echo ""
          echo "üìä Summary: Processed $LOG_COUNT log file(s) successfully"
      
      - name: Notify completion
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ API Gateway logs downloaded and uploaded to Telegram successfully"
          else
            echo "‚ùå Failed to download/upload API Gateway logs"
          fi