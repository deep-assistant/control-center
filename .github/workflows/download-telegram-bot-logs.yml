name: Download Telegram Bot Logs

on:
  workflow_dispatch:
    inputs:
      log_pattern:
        description: 'Log file pattern (e.g., telegram-bot-logs-*.tar.gz)'
        required: false
        default: 'telegram-bot-logs-*.tar.gz'
  
  # Optionally, you can schedule periodic log downloads
  # schedule:
  #   - cron: '0 5 * * *'  # Daily at 5 AM UTC

jobs:
  download-telegram-bot-logs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          node --version
          npm --version
      
      - name: Check Required Environment Variables
        run: |
          echo "üîç Checking required environment variables..."
          MISSING_VARS=""
          
          # List of required variables
          REQUIRED_VARS=(
            "SYSTEM_TELEGRAM_BOT_TOKEN"
            "DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_CHAT_ID"
            "DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_LOGS_TOPIC_ID"
            "TELEGRAM_BOT_SERVER_USER"
            "TELEGRAM_BOT_SERVER_PASSWORD"
            "TELEGRAM_BOT_SERVER_HOST"
            "TELEGRAM_BOT_SERVER_PORT"
            "TELEGRAM_BOT_SERVER_ROOT_PATH"
          )
          
          for var in "${REQUIRED_VARS[@]}"; do
            if [ -z "${!var}" ]; then
              MISSING_VARS="$MISSING_VARS $var"
              echo "‚ùå Missing: $var"
            else
              echo "‚úÖ Found: $var"
            fi
          done
          
          if [ ! -z "$MISSING_VARS" ]; then
            echo ""
            echo "‚ùå Missing required environment variables:$MISSING_VARS"
            echo "Please configure these secrets in your GitHub repository settings."
            echo "Run: node scripts/configure-github-secrets.mjs"
            exit 1
          fi
          
          echo "‚úÖ All required environment variables are configured"
        env:
          SYSTEM_TELEGRAM_BOT_TOKEN: ${{ secrets.SYSTEM_TELEGRAM_BOT_TOKEN }}
          DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_CHAT_ID: ${{ secrets.DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_CHAT_ID }}
          DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_LOGS_TOPIC_ID: ${{ secrets.DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_LOGS_TOPIC_ID }}
          TELEGRAM_BOT_SERVER_USER: ${{ secrets.TELEGRAM_BOT_SERVER_USER }}
          TELEGRAM_BOT_SERVER_PASSWORD: ${{ secrets.TELEGRAM_BOT_SERVER_PASSWORD }}
          TELEGRAM_BOT_SERVER_HOST: ${{ secrets.TELEGRAM_BOT_SERVER_HOST }}
          TELEGRAM_BOT_SERVER_PORT: ${{ secrets.TELEGRAM_BOT_SERVER_PORT }}
          TELEGRAM_BOT_SERVER_ROOT_PATH: ${{ secrets.TELEGRAM_BOT_SERVER_ROOT_PATH }}

      - name: Download and Upload Telegram Bot Logs to Telegram
        env:
          SSHPASS: ${{ secrets.TELEGRAM_BOT_SERVER_PASSWORD }}
          SYSTEM_TELEGRAM_BOT_TOKEN: ${{ secrets.SYSTEM_TELEGRAM_BOT_TOKEN }}
          DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_CHAT_ID: ${{ secrets.DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_CHAT_ID }}
          DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_LOGS_TOPIC_ID: ${{ secrets.DEEP_ASSISTANT_HEADQUATERS_TELEGRAM_LOGS_TOPIC_ID }}
          LOGS_SERVICE_NAME: 'telegram-bot'
          TELEGRAM_BOT_SERVER_USER: ${{ secrets.TELEGRAM_BOT_SERVER_USER }}
          TELEGRAM_BOT_SERVER_PASSWORD: ${{ secrets.TELEGRAM_BOT_SERVER_PASSWORD }}
          TELEGRAM_BOT_SERVER_HOST: ${{ secrets.TELEGRAM_BOT_SERVER_HOST }}
          TELEGRAM_BOT_SERVER_PORT: ${{ secrets.TELEGRAM_BOT_SERVER_PORT }}
          TELEGRAM_BOT_SERVER_ROOT_PATH: ${{ secrets.TELEGRAM_BOT_SERVER_ROOT_PATH }}
        run: |
          echo "üìã Downloading Telegram Bot logs from ${{ secrets.TELEGRAM_BOT_SERVER_HOST }}..."
          
          # SSH into the server and find the latest log file
          echo "üîç Searching for log files matching pattern: ${{ github.event.inputs.log_pattern || 'telegram-bot-logs-*.tar.gz' }}"
          
          # First, test SSH connection
          echo "üîå Testing SSH connection..."
          sshpass -e ssh -o StrictHostKeyChecking=no -p ${{ secrets.TELEGRAM_BOT_SERVER_PORT }} ${{ secrets.TELEGRAM_BOT_SERVER_USER }}@${{ secrets.TELEGRAM_BOT_SERVER_HOST }} "echo 'SSH connection successful'" || {
            echo "‚ùå SSH connection failed"
            echo "üîç Connection details:"
            echo "   Host: ${{ secrets.TELEGRAM_BOT_SERVER_HOST }}"
            echo "   Port: ${{ secrets.TELEGRAM_BOT_SERVER_PORT }}"
            echo "   User: ${{ secrets.TELEGRAM_BOT_SERVER_USER }}"
            exit 1
          }
          
          # Search for log files with simpler approach
          echo "üìÅ Searching for log files..."
          
          # Check what's in home directory
          echo "üìÇ Checking home directory contents:"
          sshpass -e ssh -o StrictHostKeyChecking=no -p ${{ secrets.TELEGRAM_BOT_SERVER_PORT }} ${{ secrets.TELEGRAM_BOT_SERVER_USER }}@${{ secrets.TELEGRAM_BOT_SERVER_HOST }} "ls -la ~" || {
            echo "‚ùå Failed to list home directory"
            exit 1
          }
          
          # Look for any log files
          echo "üîç Searching for any log files:"
          sshpass -e ssh -o StrictHostKeyChecking=no -p ${{ secrets.TELEGRAM_BOT_SERVER_PORT }} ${{ secrets.TELEGRAM_BOT_SERVER_USER }}@${{ secrets.TELEGRAM_BOT_SERVER_HOST }} "find ~ -name '*log*' -type f 2>/dev/null | head -10" || echo "No log files found"
          
          # Search for our specific pattern
          PATTERN="${{ github.event.inputs.log_pattern || 'telegram-bot-logs-*.tar.gz' }}"
          echo "üîç Looking for pattern: $PATTERN"
          
          LOG_FILE_PATH=$(sshpass -e ssh -o StrictHostKeyChecking=no -p ${{ secrets.TELEGRAM_BOT_SERVER_PORT }} ${{ secrets.TELEGRAM_BOT_SERVER_USER }}@${{ secrets.TELEGRAM_BOT_SERVER_HOST }} "find ~ -name '$PATTERN' -type f -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -1 | cut -d' ' -f2-" || echo "")
          
          # Check if we found a log file
          echo "üîç Found log file path: '$LOG_FILE_PATH'"
          
          if [ -z "$LOG_FILE_PATH" ] || [ "$LOG_FILE_PATH" = "" ]; then
            echo ""
            echo "‚ùå No log files found on server matching pattern: ${{ github.event.inputs.log_pattern || 'telegram-bot-logs-*.tar.gz' }}"
            echo ""
            echo "üí° Possible solutions:"
            echo "1. Run 'Restart Telegram Bot' workflow first to generate logs"
            echo "2. Check if log files exist with different naming pattern"
            echo "3. Verify the server has been running and generating logs"
            echo ""
            echo "‚ÑπÔ∏è  The restart workflows create log backup files that this workflow downloads."
            echo "   After running a restart workflow once, you'll have log files to download."
            exit 1
          fi
          
          echo "üì¶ Found log file: $LOG_FILE_PATH"
          
          # Set the log file path for the telegram uploader
          export LOGS_FILE_PATH="$LOG_FILE_PATH"
          
          # We're already in the control-center repository root
          # No need to cd since scripts/ is in the current directory
          
          # Run the telegram uploader script
          node scripts/telegram-logs-uploader.mjs
      
      - name: Notify completion
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Telegram Bot logs downloaded and uploaded to Telegram successfully"
          else
            echo "‚ùå Failed to download/upload Telegram Bot logs"
          fi